import akka.actor.ActorSystem
import akka.stream.scaladsl.Sink

/**
  * Created by yannick on 17.04.16.
  */
class StreamTwit {

  import akka.http.scaladsl.Http
  import akka.http.scaladsl.model._
  import akka.stream.ActorMaterializer

  import scala.concurrent.Future

  def start() = {
    implicit val system = ActorSystem()
    implicit val materializer = ActorMaterializer()

    val responseFuture: Future[HttpResponse] =
      Http().singleRequest(HttpRequest(uri = "http://google.de"))
    responseFuture
  }

  import scala.concurrent.ExecutionContext.Implicits.global

  //  responseFuture.map(res => res.entity.dataBytes.runWith(Sink.foreach(println)))
}

object A extends App {
  import scala.concurrent.ExecutionContext.Implicits.global
  new StreamTwit().start().foreach(println)
}
